https://docs.microsoft.com/en-us/aspnet/web-api/overview/web-api-routing-and-actions/routing-in-aspnet-web-api:
Web API routing is very similar to MVC routing. The main difference is that Web API uses the HTTP method, not the URI path,
to select the action. You can also use MVC-style routing in Web API.
This article does not assume any knowledge of ASP.NET MVC.

In ASP.NET Web API, a controller is a class that handles HTTP requests.
The public methods of the controller are called action methods or simply actions. 
When the Web API framework receives a request, it routes the request to an action.
To determine which action to invoke, the framework uses a routing table.
Web API creates a default route in WebApiConfig.cs file,:
routes.MapHttpRoute(
    name: "API Default",
    routeTemplate: "api/{controller}/{id}",
    defaults: new { id = RouteParameter.Optional }
);

Each entry in the routing table contains a route template. The default route template for Web API is "api/{controller}/{id}".
In this template, "api" is a literal path segment, and {controller} and {id} are placeholder variables.

When the Web API framework receives an HTTP request, it tries to match the URI against one of the route templates in the routing table. 
If no route matches, the client receives a 404 error.

Once a matching route is found, Web API selects the controller and the action:
To find the controller, Web API adds "Controller" to the value of the {controller} variable.
To find the action, Web API looks at the HTTP method, and then looks for an action whose name begins with that HTTP method name.
For example, with a GET request, Web API looks for an action that starts with "Get...", such as "GetContact" or "GetAllContacts". 
This convention applies only to GET, POST, PUT, and DELETE methods. You can enable other HTTP methods by using attributes on your controller. We'll see an example of that later.
Other placeholder variables in the route template, such as {id}, are mapped to action parameters.

Instead of using the naming convention for HTTP methods, you can explicitly specify the HTTP method for an action by decorating the action method with the HttpGet, 
HttpPut, HttpPost, or HttpDelete attribute.
 [HttpGet]
    public Product FindProduct(id) {}
