https://www.c-sharpcorner.com/UploadFile/hasansheik/covariance-and-contravariance-in-C-Sharp/
http://tomasp.net/blog/variance-explained.aspx/

Covariance and Contravariance are polymorphism extension to the arrays, delegates and generics. It provides implicit reference conversion for Arrays, Delegates and Generic parameter types. 
Covariance preserves the assignment compatibility and Contravariance opposite the covariance functionality.

Assignment Compatibility :
  String stringObject = "A String Object";
  Object anObject = stringObject;

An Object of a derived class (stringObject) is being assigned to a variable of a base class (anObject).

Array Covariance:
object[] objArray = new String[10];

Array Covariance is not safe. 
objArray[0] = 5;
That statement will not report any compile time errors. But at runtime, it causes an ArrayTypeMismatchException exception. 
It is due to the fact that the objArray variable actually holds a reference of a string Array.

Delegate Covariance:
In the following example of covariance, a string returning function is being assigned to a delegate which is declared to return object type.
static string GetString() { return ""; }
static void Main()
{
    Func<object> delegateObject = GetString;
   //String strObject = delegateObject();
}

Contravariant  Delegate:
In the following example a delegate specifies a parameter type as string. Still we can assign a method that has object as parameter.

static void SetObject(object objectParameter) { }
static void SetString(string stringParameter) { }
static void Main()
{
    Action<string> del2 = SetObject;
    .....
}

Implicit conversion between generic delegates is supported now in .NET 4.0. 
Previously the compiler would report an error for the following statement.
static void Main()
{
    Func<string> del3 = GetString;
    Func<object> del4 = del3; // Compiler error here until C# 4.0.
}

Variance for generic type Parameters

In .NET 4.0 Microsoft introduced implicit type conversion between interface instances that have different type arguments.
This means, an interface instance that has method with more derived return types than originally specified ( Covariance) or that has methods with less derived parameter types (Contravariance).

Only reference data type can be declared as variant, not the value types.
or example, IEnumerable<int> cannot be implicitly converted to IEnumerable<object>, because integers are represented by a value type

Below is possible:(Derived is class)
public static void Test1(IEnumerable<object> list) {

        }
 List<Derived> l1 = new List<Derived>(){
              new Derived() {
              }
            };
            Test1(l1);
