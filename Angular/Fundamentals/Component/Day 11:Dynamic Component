 An application may need to load new components at runtime.Like showing different adds with timeinterval:
 https://angular.io/guide/dynamic-component-loader
 https://stackblitz.com/angular/glnkxbjlvmv?file=src%2Fapp%2Fad-banner.component.ts
 
 Steps:
 
 1)Create directive:AdDirective injects ViewContainerRef to gain access to the view container of the element
 that will host the dynamically added component.
 
 import { Directive, ViewContainerRef } from '@angular/core';
@Directive({
  selector: '[ad-host]',
})
export class AdDirective {
  constructor(public viewContainerRef: ViewContainerRef) { }
}

Steps 2: use this directive in template
The <ng-template> element is a good choice for dynamic components because it doesn't render any additional output.

template: `
            <div class="ad-banner">
              <h3>Advertisements</h3>
              <ng-template ad-host></ng-template>
            </div>
          `
Step 3:
 ComponentFactoryResolver to resolve a ComponentFactory for each specific component. 
 The ComponentFactory then creates an instance of each component.
 
export class AdBannerComponent implements OnInit, OnDestroy {
  @Input() ads: AdItem[];
  currentAdIndex = -1;
  @ViewChild(AdDirective) adHost: AdDirective;
  interval: any;
  constructor(private componentFactoryResolver: ComponentFactoryResolver) { }
  ngOnInit() {
    this.loadComponent();
    this.getAds();
  }
  ngOnDestroy() {
    clearInterval(this.interval);
  }
  loadComponent() {
    this.currentAdIndex = (this.currentAdIndex + 1) % this.ads.length;
    let adItem = this.ads[this.currentAdIndex];
    let componentFactory = this.componentFactoryResolver.resolveComponentFactory(adItem.component);
    let viewContainerRef = this.adHost.viewContainerRef;
    viewContainerRef.clear();
    let componentRef = viewContainerRef.createComponent(componentFactory);
    (<AdComponent>componentRef.instance).data = adItem.data;
  }
  getAds() {
    this.interval = setInterval(() => {
      this.loadComponent();
    }, 3000);
  }
}
