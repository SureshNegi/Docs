A service is typically a class with a narrow, well-defined purpose. It should do something specific and do it well. 
Examples include:
logging service
data service
message bus
tax calculator
application configuration

Here's a HeroService that uses a Promise to fetch heroes. The HeroService depends on the Logger service and another BackendService that handles the server 
communication grunt work.
export class HeroService {
  private heroes: Hero[] = [];
  constructor(
    private backend: BackendService,
    private logger: Logger) { }
  getHeroes() {
    this.backend.getAll(Hero).then( (heroes: Hero[]) => {
      this.logger.log(`Fetched ${heroes.length} heroes.`);
      this.heroes.push(...heroes); // fill cache
    });
    return this.heroes;
  }
}

//single responsibility principle
Component classes should be lean. They don't fetch data from the server, validate user input, or log directly to the console.
They delegate such tasks to services.
A component's job is to enable the user experience and nothing more. It mediates between the view (rendered by the template) and the application logic (which often includes some notion of a model). A good component presents properties and methods for data binding. 
It delegates everything nontrivial to services.

Angular does help you follow these principles by making it easy to factor your application logic into services and make those services available to
components through dependency injection.
