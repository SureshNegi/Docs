Metadata tells Angular how to process a class.
You must add metadata to your code so that Angular knows what to do.
For example:
To tell Angular that HeroListComponent is a component, attach metadata to the class.
In TypeScript, you attach metadata by using a decorator. Here's some metadata for HeroListComponent:
@Component({
  selector:    'app-hero-list',
  templateUrl: './hero-list.component.html',
  providers:  [ HeroService ]
})
export class HeroListComponent implements OnInit {
/* . . . */
}

The @Component decorator takes a required configuration object with the information Angular needs to create and present the component 
and its view.
Here are a few of the most useful @Component configuration options:
selector: CSS selector that tells Angular to create and insert an instance of this component where it finds a <hero-list> tag in parent HTML. For example, if an app's HTML contains <hero-list></hero-list>, then Angular inserts an instance of the HeroListComponent view between those tags.
templateUrl: module-relative address of this component's HTML template, shown above.
providers: array of dependency injection providers for services that the component requires. This is one way to tell Angular 
that the component's constructor requires a HeroService so it can get the list of heroes to display.

Metadata
The metadata in the @Component tells Angular where to get the major building blocks you specify for the component.

The template, metadata, and component together describe a view.

Apply other metadata decorators in a similar fashion to guide Angular behavior. @Injectable, @Input, and @Output are a few of the more popular decorators.


Angular needs to know how the pieces of your application fit together and what other files 
and libraries the app requires. This information is called metadata

Like;
Here we are providing the metadata to angular about our component and we not need to take care about the internal mechanim
@Component({
  selector: 'app-heroes',
  templateUrl: './heroes.component.html',
  styleUrls: ['./heroes.component.css']
})
