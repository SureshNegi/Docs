transclude option?
Creating a Directive that Wraps Other Elements
angular.module('docsTransclusionDirective', [])
.controller('Controller', ['$scope', function($scope) {
  $scope.name = 'Tobias';
}])
.directive('myDialog', function() {
  return {
    restrict: 'E',
    transclude: true,
    scope: {},
    template: '<div class="alert" ng-transclude></div>'
  };
});

transclude makes the contents of a directive with this option have access to the scope outside of the directive rather than inside.
https://plnkr.co/edit/?p=preview
Best Practice: only use transclude: true when you want to create a directive that wraps arbitrary content. 

https://plnkr.co/edit/?p=preview
require option?
When a directive uses this option, $compile will throw an error unless the specified controller is found.
The ^^ prefix means that this directive searches for the controller on its parents. (A ^ prefix would make the directive look for the controller on its own element or its parents;
without any prefix, the directive would look on its own element only.)

controller option:
This is particularly useful in the case when the directive is used as a component.

what the difference is between link and controller?
The basic difference is that controller can expose an API, and link functions can interact with controllers using require.

Best Practice: use controller when you want to expose an API to other directives. Otherwise use link. 


