The real intent behind dependency Inversion is to decouple objects to the extent that no client code has to be changed 
simply because an object it depends on needs to be changed to a different one. 
That achieves loosely coupling as each of its components has, or makes use of, little or 
no knowledge of the definitions of other separate components. It achieves testability and 
replaceability because components in a loosely 
coupled system can be replaced with alternative implementations that provide the same services.

"Testability:"efforts required to test a product to ensure that it performs its intended functionality"

Example:
https://www.codeproject.com/Articles/615139/An-Absolute-Beginners-Tutorial-on-Dependency-Inver
