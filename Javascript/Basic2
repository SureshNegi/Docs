DOM?
When a user clicks on a link or enters a URL in the address of your Web browser, it downloads the page’s HTML text and builds up a model of the document’s structure called the DOM (Document Object Model). This model is used to render the HTML page on the screen
The DOM is a standard  that describes how a document must be manipulated. It defines a “language- and platform neutral interface”. So, every browser offers the same JavaScript DOM API.

The DOM API is a programming interface the JavaScript programmer can use to modify the HTML content or the CSS style of HTML elements on the fly.

Accessing DOM?
In JavaScript, the DOM is accessible through the property document of the global object window. We rarely manipulate the window object directly as it is implicit: window.document is the same as document. 

So by using this object, we can access and manipulate our page from JavaScript as a structured document.

Types of nodes in the DOM?
There are different types of nodes, but don't worry - the most useful ones are highlighted in bold.
•Element (example: <ul></ul>)
•Text (example: <p>the text within the element p is a node of type text</p>)
•Document, DocumentFragment, DocumentType (example: <!doctype html> for html5), Comment (example: <!-- left column -->), ProcessingInstruction (example: <?php echo $name ?>)

A warning about the DOM API?

 "objects literals" or "singleton objects".?
 object defined like the one shown below
 var myBoss = {
    positon: 'The Boss!',
    givenName: 'John, John the Boss!',
    office: 31
};

It is possible to access the object's properties with "." or with brackets?
 It's also possible to use the bracket notation, and manipulate the object as an array whose indexes,
 instead of being 0, 1, 2 etc., are the property names!
  var book = {
title: 'Le Petit Prince',
author: 'Saint-Exupery'
};
 var title = book['title'];
 
 In JavaScript, objects are arrays whose indexes are property names: please remember this!
 
 In some cases we have to put quotes around the property name:?
 
        When it is a reserved word from JavaScript,
        Or it contains spaces or special characters,
        Or it begins with a number.
        
Is it possible for an object's property to be a function!?        
Yes a property can also be a function, in which case it is called a method        

    var medor = {
        name: 'Benji',
        bark: function(){
            alert('Ouarf, Ouarf!');
        }
    };

In this example, the bark property's value is a function, so we call bark "a method".
A method is a special property that corresponds to the object's behavior


Properties correspond to an object's DNA (its characteristics),
and are nouns (age, name, etc.)

Methods correspond to an object's behavior
and are verbs (bark, move, changeSpeed, etc.)

this keyword?
When one wants to access an object property or wants to call another method from an object method, we must use the this keyword.
var player = {
  x:10,
  y:10,
  width:20,
  height:20,
  color:'red',
  
  move: function(x, y) {
    this.x = x;
    this.y = y;
  },
  ...
  
  Deleting a property or a method?
  You can use the JavaScript keyword "delete" to delete an object's property (it will become undefined).
  delete darkVador.race;
  
  Q)window "global" object?
   window object   
    > var a = 1;       
    > a;//    1     
    > window.a;//    1     
    > window['a'];//    1
    > let z = 1; // LET DOES NOT DEFINE properties of the window object    
    > window.z //    undefined
    
Q)The father of all objects?
All objects will inherit the properties and methods from the special class named Object.
    > var o = {}; // creation of an empty object
    > var o = new Object(); // same thing as in line 1
The toString method inherited from Object by all objects
> o.toString();
"[object Object]"

toString() in JavaScript is rather similar to the Object.toString() method we find in the Java programming language: when we try to "display" an object, it is transformed into a string by calling toString() implicitly.
> alert(t); 
> alert(t.toString()); // same as previous line of code

Q)Arrays are objects, but they are “special” objects?
Their property names are numerical indexes that start from 0 //{"0":valu1,"1":value2}
They have a special length property that represents their length/number of elements
They have other built-in properties in addition to the ones inherited from Object (toString, valueOf)
With arrays, only properties with a numerical index are taken into account by the length property!

Q)Built-in JavaScript class: Number?
The Number class can be used to transform strings into numbers, but it is recommended that you use parseInt or parseFloat instead.
Number has useful non-modifiable properties (constants): MAX_VALUE and MIN_VALUE

Q)Built-in JavaScript class: String?
The String class can be used to build new strings, but it’s preferable to use the standard syntax
var name = 'Michel';
name[0] = 'Z';
name;?

> name; // we cannot modify a string using s[index] = value;
"Michel"
a string is not modifiable at all.
When we do var s = s + "hello", in fact, we are building a new string somewhere in memory, and we assign this new value to the variable s.
We never "modify" the characters of the string s, we just give to s another address in memory to point to. 

Q)Built-in JS class: Date?

