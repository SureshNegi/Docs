Javascript basi tutorials:
https://www.javatpoint.com/javascript-objects

https://courses.edx.org/courses/course-v1:W3Cx+JS.0x+3T2017/courseware/7192368f1af84c349fe527e3e7c49512/6724369df5b2437ea561889297f925bb/?child=first
What is i18n?
'Internationalization' is sometimes abbreviated to 'i18n' in English, because there are 18 characters between the 'i' and the 'n'.
Access to the Web for all has been a fundamental concern and goal of the W3C since the beginning. It is easy to overlook the needs of people from cultures different to your own, or who use different languages or writing systems, but you have to ensure that any content or application that you design or develop is ready to support the international features that they will need.

Why?
If you don't use those features you will create barriers for people from different cultures who are trying to access your content. This is important even if you think you are only designing for a specific community â€“ communities are made up of diverse individuals, and the Web stretches worldwide.

Which Encoding?
https://www.w3.org/International/questions/qa-choosing-encodings
As a content author or developer, you should nowadays always choose the UTF-8 character encoding for your content or data. This Unicode encoding is a good choice because you can use a single encoding to handle any character you are likely to meet. This greatly simplifies things.

Essential steps in Web internationalization?
1)Example of char encoding:
Check #1: There is a character encoding declaration near the start of your source code, and  its value is UTF-8.
    <head>
    <meta charset="utf-8"/>
    ...
    </head>

Check #2: The HTML tag has a lang attribute which correctly indicates the language of your content.
example 2: This indicates that the page is in French.
    <!doctype html>
    <html lang="fr">
    <head>
    
What is Internationalization Checker.?
https://validator.w3.org/i18n-checker/

Q)void elements?
These elements, without a "/" at the end, are called "void elements". They are : area, base, br, col, embed, hr, img, input, link, menuitem, meta, param, source, track, wbr.

Q)what is EcmaScript?
Towards the end of 1996, JavaScript was standardized by ECMA as the EcmaScript standard. So no matter whether you see it called JavaScript or EcmaScript, don't worry, it's the same thing.

Q)ES2015 or ES6?
the latest official version is version 6, also called ES2015 or ES6. A 7th version is on its way (called ES2016, ES2016+, ES7, JavaScript 7...).

Q)Why Javascript?
In the beginning, JavaScript was invented to work not only on the client side (in Web browsers) but also on 
the server side (on the Netscape HTTP Web server back in 1995).

In recent years this trend has returned, thanks to the appearance of the Node.js server/JavaScript interpreter. 
It's common to see JavaScript applications running on a remote Web server. This particular use of JavaScript will be 
covered by another course that will be proposed by W3Cx, but mastering JavaScript basics is highly recommended before trying to learn JavaScript server side programming.

Q)JavaScript is an interpreted language?
JavaScript is an interpreted (or just-in-time compiled) language, which means that the code is converted into a machine language at, or just before, runtime. The most popular JavaScript engines are:

        SpiderMonkey (included in Mozilla Firefox)
        JavaScriptCore (included in Apple Safari)
        Chrome V8 (included in Google Chrome, in the Node.js server)
        Chakra (included in Microsoft Internet Explorer and now in the Microsoft Edge browser)
        
 Q)What is DOM API?
 In the case of JavaScript, the DOM API is implemented natively by the browser, and you can call several functions/methods or access properties of the DOM:  an object that represents the document (the Web page). 

Q)selector API ?
It uses the selector API to target a particular part of the DOM (in our case, the main title of the page), the HTML element with an id attribute equal to "mainTitle". The selector API uses the same syntax as CSS to select elements in the document. In our case, "#mainTitle" is a selector value that means "the element whose id is equal to mainTitle".

Q)Other API?
use numerous APIs in addition to the DOM and selector APIs: multimedia, drawing, animating, geolocation, webcam, etc.
You will have APIs for manipulating multimedia (audio and video), geolocation (getting the longitude and latitude), orientation (on mobile devices), accessing the webcam or the microphone, etc.
E.g google map API

Q)type="text/javascript"?
Old JavaScript examples may use a type attribute:
<script type="text/javascript">.
The type attribute is now obsolete and should be ignored.

Q)JavaScript is weakly typed.?
JavaScript is weakly typed. Each variable is declared with the keyword var or let. So you are not required to specify the type of variable you are creating. 

Q) keyword let ?
With JavaScript versions < 5 (prior to 2015), there was a single way to create (we say "declare") a variable: using the var keyword, but with the subsequent versions (called ES2015/ES2016 or JavaScript 6/7) we can also use the keyword let (this has some subtle differences").

Q)naming convention?
The JavaScript community has some conventions about naming variables:
The camelCase notation is preferred: mySpaceShip, sumOfAllGrades, etc.
Constants?
The naming convention is to use uppercase letters with underscores. 

Example: var TIME_LIMIT = 50;

Q)const ?
With JavaScript 5, constants were declared as normal variables, using the var keyword, and there were no verifications by the JavaScript interpreter forbidding you to modify them after you assigned a value to them.

With ES2015/2016 it is recommended that you use the keyword const instead of var to declare them. This means that an error will be raised if you try to change their value in the future.

Q) Var Scope?
When a variable is declared in a function, we also call it simply "a local variable", as opposed to "a global variable". In JavaScript 5 (and this is not common in programming languages), local variables are local to the function. They can be used anywhere inside the function.
Most programming languages have local variables that are limited to the block of instructions between '{' and '}' 
that contains the variable declaration. We call these variables "block variables". This is the case with variables declared 
with the let keyword  introduced by JavaScript 6 / ES6. See examples at the end of this section.

var a = 1; // global variable

function f() {
  if (true) {
    // this is a block, defined by "{" and "}"
    var a = 4; // this "a" is NOT local to the block
  }
  alert(a); // alerts '4', not the global value of '1'
            // a variable declared with "var" in a 
            // function is local to the function!
            // and can be used anywhere in the function
            // so here, the local a masks the global a!
}

Q) Objects?
Objects (everything that is not a  "primitive data type" is an object):
var michel = {firstName:'Michel', lastName:'Buffa'};

Q)predefined objects?
There is a set of "predefined objects" in JavaScript (arrays, functions, etc).

Q)primitive data types in javascript?
avaScript has a small set of primitive data types

        number: 1,2,105,3.14 ...
        string: 'a', "one", 'two' , 'World Wide Web' ...
        boolean: true / false
        undefined: absent or unknown value
        null: special keyword, meaning no value or empty. The difference from undefined is that when a variable is null, it is still defined.

Anything that is not listed above is an object

Q)Knowing the type of a JavaScript variable: ?
typeof  operator

Q)Special values?
    +Infinity
    -Infinity
    NaN (Not a Number)
    
 Q)Octal?
 Be careful with this, don't start an integer with 0 (zero), JavaScript will understand it as an octal value.
 
 Q)How number is represented?
 In JavaScript, numbers are represented with a double-precision 64-bit format (IEEE 754). These 64 bits are used with this table:
 Total bits Sign    Exponent    Significand
    64        1         11      52
    
  Q)Strings are arrays of characters! .is string object?
  yes- var s = 'one';s[0];s.length;
  
  Q)what is argument in Functions ?
  An array named "argument" is created automatically in each function, it contains all the call parameters of the function:
  function f() {
   return arguments;
} 
f( 1, 2, 3, 4, true, 'Michel Buffa');
// returns [1, 2, 3, 4, true, "Michel Buffa"]
  
Q)What is HTML Table JavaScript API?
HTML Table JavaScript API, and is useful for building tables on the fly
// Add a line to the HTML table
function addLineToHTMLTable(firstName, lastName) {
    // Get the body of the table using the selector API
    var tableBody = document.querySelector("#tableContactBody");
  
    // Add a new row at the end of the table
    var newRow   = tableBody.insertRow();

   // add  new cells to the row
   var firstNameCell  = newRow.insertCell();
   firstNameCell.innerHTML = firstName;
  
   var lastNameCell   = newRow.insertCell();
   lastNameCell.innerHTML = lastName;
}

Q)HTML5 canvas?
The HTML5 canvas is useful for drawing and animating at 60 frames/second.

Q)What is function expression?
A JavaScript function can also be defined using an expression that can be stored in a variable. Then, the variable can be used as a function:
The "function expression" is an "anonymous function", a function without a name, that represents a value that can be assigned to a variable. Then, the variable can be used to execute the function.

Q)Callbacks?
Indeed, as functions are first-class objects, we can pass a function as an argument, as a parameter to another function and later execute that passed-in function or even return it to be executed later. When we do this, we talk about callback functions in JavaScript: a function passed to another function, and executed inside the function we called.
window.addEventListener('click', processClick);

function processClick(event) {
  document.body.innerHTML += "Button clicked<br>";
}
Callback functions are derived from a programming paradigm known as functional programming. They are very, very common in JavaScript. 

Q)We say that "event processing" is asynchronous.?
With JavaScript, a button click, a move of the mouse, a resized window, and many other interactions create what are called "events".  The timing and order of events cannot be predicted in advance. We say that "event processing" is asynchronous. Web browsers detect events as they occur, and may pass them to JavaScript code. They do this by allowing you to register functions as event listeners, also called handlers or callbacks for specific events.

Each time an event occurs, the browser puts it in a "queue of events".
Then the browser looks at a list of "Event Listeners" and calls the ones that correspond to the type of event "they listen to".

Q)The event object?
The event object is the only parameter passed to event listeners

    function processClick(evt) {
        alert("Button clicked!");
    }
Each event listener has a single parameter that is  a "DOM event object". It has various properties and methods that can be very useful.
For example, with a 'keyup', 'keydown' or 'keypress' event, the event object contains the code of the key that has been pressed/released,
with a 'mousemove' listener we can get the relative position of the mouse in the DOM element that has generated the event, etc.
evt.type: the name of the event
evt.target: for example, is the HTML element that has fired the event. In our previous examples with the click listeners on a button, evt.target in the event listener is the button itself.
evt.stopPropagation(): will not propagate the event to all other elements that listen to it. If several elements are registered for a click event - for example, you have a click listener on a button and on the window (the whole page). If you click on the button, and if in its click event listener you call evt.stopPropagation(); then the click event listener on the window object will never be called.
evt.preventDefault(): the default browser behavior will not be executed. For example, in a 'contextmenu' event listener attached to an object, if you call evt.preventDefault(), instead of having the right click default context menu of your browser displayed, you'll be able to display your own context menu, like in this example.
It also contains properties that are associated with the type of the event, for example:
evt.button: the mouse button that has been used in the case of a mouse event listener
evt.keyCode: the code of the key that has been used
evt.pageX: coordinate of the mouse relative to the page
        etc.

























