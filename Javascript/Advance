Classes?
singleton objects: objects that only occur once: player, darkVador, etc.
Imagine the balls from module 2: they all had the same shape (circle), the same x, y, radius and color properties, but they were all different. They all belonged to the
same class of object (ball), but they were all different in terms of their properties' values.
In many programming languages, these templates are called "classes".

In JavaScript 5 (also called ES5), we did not have such a concept, instead we had "constructor functions".
In JavaScript 6 (ES6), we have the concept of classes, and the syntax is rather similar to what we find in other 
object oriented programming languages.

With JavaScript version 5 (and previous versions), you can define a pseudo-class template called "a constructor function". 
The syntax is the same as for creating a function, except that:
By convention, its name is Capitalized. The first letter of the function name is in uppercase, this is a good way to know, when you read someone else's code, that this is not a regular function, but a constructor function. Its name is a noun, the name of the class of objects you are going to build. Example: Person, Vehicle, Enemy, Product, Circle, Ball, Player, Hero, etc.
You build new objects using the new keyword: 
var car = new Car('Ferrari', 'red');
The parameters of the function are the "constructor parameters": the new object that you are building will take these as 
its initial properties' values. You can build a Hero, but you must give him/her a name, a side, etc.
You define the property names and method names using the this keyword. But beware: the syntax is not the same as the syntax we used for singleton/simple objects.
No more ":" and "," between properties. Here we use "=" and ";" like in regular functions.

Example: 

function Hero(name, side) {
  this.name = name;
  this.side = side;
  
  this.speak = function() {
    return "<p>My name is " + this.name +
      ", I'm with the " + this.side + ".</p>";
  }
}

var darkVador = new Hero("Dark Vador", "empire");
var luke = new Hero("Luke Skywalker", "rebels");
var ianSolo = new Hero("Ian Solo", "rebels");
In a constructor function named "Hero", you will find properties declared like this: this.name this.side;
and methods declared like this: this.speak = function() {...}

Creating objects using the new ES6 classes?
ES5's constructor function syntax is not easy to read. If someone does not respect the "conventions" that we've just discussed (start the class with an uppercase, etc.), then the code may work, but it will be difficult to guess
that we are not in front of a regular function. 
ES6 created a class keyword and a constructor keyword, 
along with advanced concepts that will be the subject of an "advanced JavaScript" course. 

Main changes:
A class is simply defined using the keyword class followed by the name of the class
The unique constructor is defined using the constructor keyword followed by the parameters
The constructor is executed when an object is created using the keyword new
     Example: let h1 = new Hero('Ian Solo', 'rebels');

This will call constructor(name, side) in the example below.
  A method is simply defined by its name followed by its parameters (we no more use the keyword "function")
  Example: speak() {...} in the source code below.

example:
    class Hero {
        constructor(name, side) {
            this.name = name; // property
            this.side = side; // property
        }
        speak() { // method, no more "function"
            return "<p>My name is " + this.name +
                   ", I'm with the " + this.side + ".</p>";
        }
    }     
    var darkVador = new Hero("Dark Vador", "empire");



